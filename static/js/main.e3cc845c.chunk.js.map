{"version":3,"sources":["engine.js","Overlay.js","SoundSource.js","App.js","index.js","data.js"],"names":["painting","loadedSounds","Map","players","meters","soundSourceLevels","soundSourceRipples","overlayFade","isOverlayVisible","animateSoundSources","entries","entry","file","meter","gain","Tone","getValue","set","requestAnimationFrame","makeObservable","this","observable","isLoaded","computed","setMouseListeners","values","every","v","window","addEventListener","e","windowInnerWidth","innerWidth","windowInnerHeight","innerHeight","setSoundPosition","pageX","pageY","key","sounds","forEach","get","url","process","player","console","log","toDestination","connect","loop","volume","value","sound","state","start","animatedOverlay","AnimatedValue","end","play","xPercent","yPercent","element","document","getElementById","position","soundXPercent","soundYPercent","radius","dx","Math","abs","dy","distance","sqrt","min","decibels","observer","overlayStyle","opacity","engine","className","style","onClick","fadeOutOverlay","playSounds","DEFAULT_SIZE","DEFUALT_RIPPLE_MULTIPLE","SoundSource","soundSourceRef","useRef","rippleRef","useEffect","dispose","autorun","rippleGain","undefined","soundSource","current","ripple","size","width","height","marginLeft","marginTop","rippleSize","soundIconStyle","left","top","backgroundColor","color","rippleStyle","ref","id","fontSize","imageUrl","map","src","alt","name","artist","configure","enforceActions","setPainting","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e3cc845c.chunk.js","sourcesContent":["import * as Tone from \"tone\";\nimport AnimatedValue from \"animated-value\";\nimport { makeObservable, observable, computed } from \"mobx\";\n\nconst DEFAULT_DECIBELS = -12;\n\nclass Engine {\n  painting = null;\n\n  loadedSounds = new Map();\n  players = new Map();\n  meters = new Map();\n\n  soundSourceLevels = new Map();\n  soundSourceRipples = new Map();\n\n  overlayFade = 1;\n  isOverlayVisible = true;\n\n  get isLoaded() {\n    return [...this.loadedSounds.values()].every((v) => v == true);\n  }\n\n  constructor() {\n    makeObservable(this, {\n      painting: observable,\n      loadedSounds: observable,\n      soundSourceLevels: observable,\n      soundSourceRipples: observable,\n      overlayFade: observable,\n      isOverlayVisible: observable,\n      isLoaded: computed,\n    });\n\n    this.setMouseListeners();\n\n    requestAnimationFrame(() => {\n      this.animateSoundSources();\n    });\n  }\n\n  setMouseListeners() {\n    const mouseMove = (e) => {\n      const windowInnerWidth = window.innerWidth;\n      const windowInnerHeight = window.innerHeight;\n      this.setSoundPosition(\n        e.pageX / windowInnerWidth,\n        e.pageY / windowInnerHeight\n      );\n    };\n    window.addEventListener(\"mousemove\", mouseMove, false);\n  }\n\n  setPainting(painting) {\n    this.painting = painting;\n    const { key, sounds } = painting;\n\n    sounds.forEach((entry) => {\n      const { file } = entry;\n      if (this.players.get(file)) {\n        return;\n      }\n      const url = `${process.env.PUBLIC_URL}/${key}/${file}`;\n      const player = new Tone.Player(url, () => {\n        console.log(\"loaded\", file);\n        this.loadedSounds.set(file, true);\n      }).toDestination();\n\n      const meter = new Tone.Meter(0.8);\n      player.connect(meter);\n      this.meters.set(file, meter);\n\n      this.players.set(file, player);\n      player.loop = true;\n      player.volume.value = DEFAULT_DECIBELS;\n\n      this.loadedSounds.set(file, false);\n    });\n  }\n\n  animateSoundSources = () => {\n    for (const entry of this.meters.entries()) {\n      const [file, meter] = entry;\n      const gain = Tone.dbToGain(meter.getValue());\n      this.soundSourceRipples.set(file, gain);\n    }\n\n    requestAnimationFrame(() => {\n      this.animateSoundSources();\n    });\n  };\n\n  async playSounds() {\n    await Tone.start();\n    this.painting.sounds.forEach((sound) => {\n      const player = this.players.get(sound.file);\n      if (player && player.state !== \"started\") {\n        player.start();\n      }\n    });\n  }\n\n  async fadeOutOverlay() {\n    if (this.animatedOverlay) return;\n\n    this.animatedOverlay = new AnimatedValue({\n      start: 1,\n      end: 0,\n    });\n\n    await this.animatedOverlay.play(500, () => {\n      this.overlayFade = this.animatedOverlay.value();\n    });\n\n    this.isOverlayVisible = false;\n    this.animatedOverlay = null;\n  }\n\n  setSoundPosition(xPercent, yPercent) {\n    this.painting.sounds.forEach((sound) => {\n      const element = document.getElementById(sound.file);\n      const [soundXPercent, soundYPercent] = sound.position;\n      const { radius } = sound;\n      if (element) {\n        const dx = Math.abs(soundXPercent - xPercent);\n        const dy = Math.abs(soundYPercent - yPercent);\n        const distance = Math.sqrt(dx ** 2 + dy ** 2);\n        const distancePercent = Math.min(1, distance / radius);\n        const gain = 1 - distancePercent;\n        const decibels = Tone.gainToDb(gain);\n        const player = this.players.get(sound.file);\n        this.soundSourceLevels.set(sound.file, gain);\n        if (player) {\n          player.volume.value = decibels + DEFAULT_DECIBELS;\n        }\n      }\n    });\n  }\n}\n\nexport default new Engine();\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport engine from \"./engine\";\n\nimport \"./Overlay.css\";\n\nconst OVERLAY_OPACITY = 0.75;\n\nexport function Overlay() {\n  const overlayStyle = {\n    opacity: engine.overlayFade * OVERLAY_OPACITY,\n  };\n\n  return (\n    <div className=\"overlay\" style={overlayStyle}>\n      {engine.isLoaded ? (\n        <span\n          className=\"state loaded\"\n          onClick={() => {\n            engine.fadeOutOverlay();\n            engine.playSounds();\n          }}\n        >\n          Start\n        </span>\n      ) : (\n        <div className=\"state loading\">Loading...</div>\n      )}\n    </div>\n  );\n}\n\nexport default observer(Overlay);\n","import React, { useRef, useEffect } from \"react\";\nimport { autorun } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\n\nimport \"./SoundSource.css\";\n\nimport engine from \"./engine\";\n\nconst MIN_OPACITY = 0.5;\nconst MIN_SIZE = 80;\nconst DEFAULT_SIZE = 100;\nconst MAX_SIZE = 120;\nconst DEFUALT_RIPPLE_MULTIPLE = 1.25;\n\nfunction SoundSource({ sound }) {\n  const [xPercent, yPercent] = sound.position;\n  const soundSourceRef = useRef(null);\n  const rippleRef = useRef(null);\n\n  useEffect(() => {\n    const dispose = autorun(() => {\n      const gain = engine.soundSourceLevels.get(sound.file);\n      const rippleGain = engine.soundSourceRipples.get(sound.file);\n\n      if (gain == undefined) return;\n\n      const soundSource = soundSourceRef.current;\n      const ripple = rippleRef.current;\n\n      let opacity = gain * (1 - MIN_OPACITY) + MIN_OPACITY;\n      opacity = opacity * (1 - engine.overlayFade);\n      const size = gain * (MAX_SIZE - MIN_SIZE) + MIN_SIZE;\n\n      soundSource.style.opacity = opacity;\n      soundSource.style.width = `${size}px`;\n      soundSource.style.height = `${size}px`;\n      soundSource.style.marginLeft = `${-size / 2}px`;\n      soundSource.style.marginTop = `${-size / 2}px`;\n\n      const add = rippleGain * 1000;\n      const rippleSize = size * DEFUALT_RIPPLE_MULTIPLE + add;\n\n      ripple.style.opacity = opacity;\n      ripple.style.width = `${rippleSize}px`;\n      ripple.style.height = `${rippleSize}px`;\n      ripple.style.marginLeft = `${-rippleSize / 2}px`;\n      ripple.style.marginTop = `${-rippleSize / 2}px`;\n    });\n    return () => {\n      dispose();\n    };\n  }, []);\n\n  const soundIconStyle = {\n    width: `${DEFAULT_SIZE}px`,\n    height: `${DEFAULT_SIZE}px`,\n    marginLeft: `${-DEFAULT_SIZE / 2}px`,\n    marginTop: `${-DEFAULT_SIZE / 2}px`,\n    left: `${xPercent * 100}%`,\n    top: `${yPercent * 100}%`,\n    backgroundColor: sound.color,\n    opacity: 0,\n  };\n\n  const rippleStyle = {\n    width: `${DEFAULT_SIZE * DEFUALT_RIPPLE_MULTIPLE}px`,\n    height: `${DEFAULT_SIZE * DEFUALT_RIPPLE_MULTIPLE}px`,\n    marginLeft: `${-(DEFAULT_SIZE * DEFUALT_RIPPLE_MULTIPLE) / 2}px`,\n    marginTop: `${-(DEFAULT_SIZE * DEFUALT_RIPPLE_MULTIPLE) / 2}px`,\n    left: `${xPercent * 100}%`,\n    top: `${yPercent * 100}%`,\n    opacity: 0,\n  };\n\n  return (\n    <>\n      <div ref={rippleRef} className=\"ripple\" style={rippleStyle}></div>\n      <div\n        id={sound.file}\n        ref={soundSourceRef}\n        className=\"sound-icon\"\n        style={soundIconStyle}\n      >\n        <VolumeUpIcon style={{ fontSize: 48 }} />\n      </div>\n    </>\n  );\n}\n\nexport default SoundSource;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport \"./App.css\";\n\nimport Overlay from \"./Overlay\";\nimport SoundSource from \"./SoundSource\";\n\nimport engine from \"./engine\";\n\nfunction App() {\n  const { painting } = engine;\n  const imageUrl = `${process.env.PUBLIC_URL}/${painting.key}/image.jpg`;\n\n  return (\n    <div className=\"App\">\n      <div className=\"image-container\">\n        {engine.isOverlayVisible ? <Overlay /> : null}\n\n        {painting.sounds.map((sound) => {\n          return <SoundSource key={sound.file} sound={sound} />;\n        })}\n\n        <img src={imageUrl} className=\"painting\" alt=\"\" />\n\n        <div className=\"image-description\">\n          <span className=\"title\">{painting.name}</span>\n          <span className=\"artist\">{painting.artist}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { configure } from \"mobx\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { paintingsData } from \"./data\";\nimport engine from \"./engine\";\n\nconfigure({\n  enforceActions: \"never\",\n});\n\nconst painting = paintingsData[2];\nengine.setPainting(painting);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export const paintingsData = [\n  {\n    name: \"Wheatfield with Crows\",\n    artist: \"Vincent Van Gogh\",\n    key: \"van_gogh\",\n    width: 3508,\n    height: 1669,\n    sounds: [\n      {\n        file: \"wheat.mp3\",\n      },\n      {\n        file: \"crow.mp3\",\n      },\n    ],\n  },\n  {\n    name: \"Girl in a Boat with Geese\",\n    artist: \"Berthe Morisot\",\n    key: \"morisot\",\n    width: 3392,\n    height: 4096,\n    sounds: [\n      {\n        file: \"geese.mp3\",\n      },\n      {\n        file: \"humming.wav\",\n      },\n      {\n        file: \"rowing.mp3\",\n      },\n    ],\n  },\n  {\n    name: \"Impression, Sunrise\",\n    artist: \"Claude Monet\",\n    key: \"monet\",\n    width: 1280,\n    height: 993,\n    sounds: [\n      {\n        file: \"foghorn.mp3\",\n        position: [0.1, 0.15],\n        radius: 0.3,\n        color: \"coral\",\n      },\n      {\n        file: \"gulls.mp3\",\n        position: [0.8, 0.2],\n        radius: 0.5,\n        color: \"coral\",\n      },\n      {\n        file: \"harborwaves.mp3\",\n        position: [0.5, 0.8],\n        radius: 0.7,\n        color: \"coral\",\n      },\n    ],\n  },\n];\n"],"sourceRoot":""}
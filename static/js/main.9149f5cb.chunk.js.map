{"version":3,"sources":["audio.js","App.js","data.js","reportWebVitals.js","index.js"],"names":["value","players","Map","loadedSounds","sceneSounds","makeObservable","this","observable","isLoaded","computed","values","every","v","key","sounds","forEach","entry","file","get","url","player","Tone","console","log","set","toDestination","loop","volume","sound","state","start","x","y","painting","name","artist","width","height","audio","setSounds","autorun","observer","useState","isOverlayShown","setIsOverlayShown","useEffect","mouseMove","e","setSoundPosition","pageX","pageY","window","addEventListener","removeEventListener","imageUrl","process","showHideOverlay","className","onClick","playSounds","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAuDe,M,WA3Cb,WAAYA,GAAQ,yBARpBC,QAAU,IAAIC,IAQK,KAPnBC,aAAe,IAAID,IAOA,KANnBE,YAAc,GAOZC,YAAeC,KAAM,CACnBH,aAAcI,IACdC,SAAUC,MAEZH,KAAKN,MAAQA,E,qDARb,OAAO,YAAIM,KAAKH,aAAaO,UAAUC,OAAM,SAACC,GAAD,OAAY,GAALA,S,+CAW5CC,EAAKC,GAAS,IAAD,OACrBA,EAAOC,SAAQ,SAACC,GAAW,IACjBC,EAASD,EAATC,KACR,IAAI,EAAKhB,QAAQiB,IAAID,GAArB,CAGA,IAAME,EAAG,UAAMN,EAAN,YAAaI,GAChBG,EAAS,IAAIC,IAAYF,GAAK,WAClCG,QAAQC,IAAI,SAAUN,GACtB,EAAKd,aAAaqB,IAAIP,GAAM,MAC3BQ,gBACH,EAAKxB,QAAQuB,IAAIP,EAAMG,GACvBA,EAAOM,MAAO,EACdN,EAAOO,OAAO3B,OAAS,GAEvB,EAAKG,aAAaqB,IAAIP,GAAM,OAG9BX,KAAKF,YAAcU,I,mCAGP,IAAD,OACXR,KAAKF,YAAYW,SAAQ,SAACa,GACxB,IAAMR,EAAS,EAAKnB,QAAQiB,IAAIU,EAAMX,MAClCG,GAA2B,YAAjBA,EAAOS,OACnBT,EAAOU,a,uCAKIC,EAAGC,Q,MCzChBC,ECyBJ,CACEC,KAAM,sBACNC,OAAQ,eACRtB,IAAK,QACLuB,MAAO,KACPC,OAAQ,IACRvB,OAAQ,CACN,CACEG,KAAM,eAER,CACEA,KAAM,aAER,CACEA,KAAM,qBDtCdqB,EAAMC,UAAUN,EAASpB,IAAKoB,EAASnB,QAEvC0B,aAAQ,WACNlB,QAAQC,IAAI,eAAMe,EAAM9B,aA+CXiC,mBA5Cf,WAAgB,IAAD,EAC+BC,oBAAS,GADxC,mBACNC,EADM,KACUC,EADV,KAEbC,qBAAU,WACR,IAAMC,EAAY,SAACC,GACjBT,EAAMU,iBAAiBD,EAAEE,MAAOF,EAAEG,QAIpC,OAFAC,OAAOC,iBAAiB,YAAaN,GAE9B,WACLK,OAAOE,oBAAoB,YAAaP,MAEzC,IAEH,IAAMQ,EAAQ,UAAMC,oBAAN,YAAgCtB,EAASpB,IAAzC,cACR2C,EAAkBb,EAAiB,QAAU,SAEnD,OACE,qBAAKc,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAS,kBAAaD,GAA3B,SACGlB,EAAM9B,SACL,sBACEiD,UAAU,eACVC,QAAS,WACPd,GAAkB,GAClBN,EAAMqB,cAJV,mBAUA,qBAAKF,UAAU,gBAAf,0BAGJ,qBAAKG,IAAKN,EAAUG,UAAU,WAAWI,IAAI,KAC7C,sBAAKJ,UAAU,oBAAf,UACE,sBAAMA,UAAU,QAAhB,SAAyBxB,EAASC,OAClC,sBAAMuB,UAAU,SAAhB,SAA0BxB,EAASE,oBEzC9B2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9149f5cb.chunk.js","sourcesContent":["import * as Tone from \"tone\";\nimport { makeObservable, observable, computed } from \"mobx\";\n\nclass AudioPlayer {\n  players = new Map();\n  loadedSounds = new Map();\n  sceneSounds = [];\n\n  get isLoaded() {\n    return [...this.loadedSounds.values()].every((v) => v == true);\n  }\n\n  constructor(value) {\n    makeObservable(this, {\n      loadedSounds: observable,\n      isLoaded: computed,\n    });\n    this.value = value;\n  }\n\n  setSounds(key, sounds) {\n    sounds.forEach((entry) => {\n      const { file } = entry;\n      if (this.players.get(file)) {\n        return;\n      }\n      const url = `${key}/${file}`;\n      const player = new Tone.Player(url, () => {\n        console.log(\"loaded\", file);\n        this.loadedSounds.set(file, true);\n      }).toDestination();\n      this.players.set(file, player);\n      player.loop = true;\n      player.volume.value = -12;\n\n      this.loadedSounds.set(file, false);\n    });\n\n    this.sceneSounds = sounds;\n  }\n\n  playSounds() {\n    this.sceneSounds.forEach((sound) => {\n      const player = this.players.get(sound.file);\n      if (player && player.state !== \"started\") {\n        player.start();\n      }\n    });\n  }\n\n  setSoundPosition(x, y) {\n    // console.log(x, y);\n  }\n}\n\nexport default new AudioPlayer();\n","import React, { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nimport \"./App.css\";\n\nimport { paintingsData } from \"./data\";\nimport audio from \"./audio\";\n\nconst painting = paintingsData[2];\naudio.setSounds(painting.key, painting.sounds);\n\nautorun(() => {\n  console.log(\"ðŸ”¥\", audio.isLoaded);\n});\n\nfunction App() {\n  const [isOverlayShown, setIsOverlayShown] = useState(true);\n  useEffect(() => {\n    const mouseMove = (e) => {\n      audio.setSoundPosition(e.pageX, e.pageY);\n    };\n    window.addEventListener(\"mousemove\", mouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", mouseMove);\n    };\n  }, []);\n\n  const imageUrl = `${process.env.PUBLIC_URL}/${painting.key}/image.jpg`;\n  const showHideOverlay = isOverlayShown ? \"shown\" : \"hidden\";\n\n  return (\n    <div className=\"App\">\n      <div className=\"image-container\">\n        <div className={`overlay ${showHideOverlay}`}>\n          {audio.isLoaded ? (\n            <span\n              className=\"state loaded\"\n              onClick={() => {\n                setIsOverlayShown(false);\n                audio.playSounds();\n              }}\n            >\n              Start\n            </span>\n          ) : (\n            <div className=\"state loading\">Loading...</div>\n          )}\n        </div>\n        <img src={imageUrl} className=\"painting\" alt=\"\" />\n        <div className=\"image-description\">\n          <span className=\"title\">{painting.name}</span>\n          <span className=\"artist\">{painting.artist}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(App);\n","export const paintingsData = [\n  {\n    name: \"Wheatfield with Crows\",\n    artist: \"Vincent Van Gogh\",\n    key: \"van_gogh\",\n    width: 3508,\n    height: 1669,\n    sounds: [\n      {\n        file: \"wheat.mp3\",\n      },\n      {\n        file: \"crow.mp3\",\n      },\n    ],\n  },\n  {\n    name: \"Girl in a Boat with Geese\",\n    artist: \"Berthe Morisot\",\n    key: \"morisot\",\n    width: 3392,\n    height: 4096,\n    sounds: [\n      {\n        file: \"geese.mp3\",\n      },\n      {\n        file: \"humming.wav\",\n      },\n      {\n        file: \"rowing.mp3\",\n      },\n    ],\n  },\n  {\n    name: \"Impression, Sunrise\",\n    artist: \"Claude Monet\",\n    key: \"monet\",\n    width: 1280,\n    height: 993,\n    sounds: [\n      {\n        file: \"foghorn.mp3\",\n      },\n      {\n        file: \"gulls.mp3\",\n      },\n      {\n        file: \"harborwaves.mp3\",\n      },\n    ],\n  },\n];\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}